// <auto-generated />
using System;
using Backend.DAL.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DAL.Databases.Migrations
{
    [DbContext(typeof(DenticareContext))]
    partial class DenticareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("CitizenId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("char(4)")
                        .HasColumnName("role");

                    b.Property<short>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82213f2b-dc0b-400b-abef-1beda0231441"),
                            Address = "phường Phước Long A, Q.9, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(1987, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janetran639@gmail.com",
                            FirstName = "Hà",
                            LastName = "Phùng Trần Mai",
                            Password = "999doahoahong@",
                            PhoneNumber = "0902694265",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("9e9da0b7-672d-448a-a392-bcc912e17cff"),
                            Address = "456 Oak St, Anytown, USA",
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "Password123!",
                            PhoneNumber = "2345678901",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("0d5db597-9210-45ef-be17-cdc57ed3b106"),
                            Address = "789 Pine St, Anytown, USA",
                            DateOfBirth = new DateTime(1980, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Password = "Password123!",
                            PhoneNumber = "3456789012",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("18d2946a-1a58-4bd2-8044-5e6ace4833b5"),
                            Email = "adminexample@gmail.com",
                            FirstName = "Admin 01",
                            Password = "reallystrongpass!123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "SA",
                            Sex = (short)0
                        },
                        new
                        {
                            Id = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            Address = "Tân Bình, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhatvmse172011@fpt.edu.vn",
                            FirstName = "Nhật",
                            LastName = "Vũ Minh",
                            Password = "Password123!",
                            PhoneNumber = "0366412667",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("6fd69ed7-baa9-493d-bbde-b7546b9348a8"),
                            Address = "Thủ Đức, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bangtlhss170429@fpt.edu.vn",
                            FirstName = "Bằng",
                            LastName = "Trần Lê Hữu",
                            Password = "Password123!",
                            PhoneNumber = "0384691554",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            Address = "phường Chánh Nghĩa, Tp.Thủ Dầu Một, tỉnh Bình Dương",
                            DateOfBirth = new DateTime(2003, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vulongbinhduong@gmail.com",
                            FirstName = "Long",
                            LastName = "Vũ",
                            Password = "xxx123!",
                            PhoneNumber = "0866742614",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            Address = "Tp.Sóc Trăng",
                            DateOfBirth = new DateTime(2003, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huyquac@gmail.com",
                            FirstName = "Huy",
                            LastName = "Quách Hoàng",
                            Password = "xxx123!",
                            PhoneNumber = "0332877905",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(50)")
                        .HasColumnName("appointment_id");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<TimeOnly>("AppointmentEndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("appointment_end_time");

                    b.Property<TimeOnly>("AppointmentStartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("appointment_start_time");

                    b.Property<short>("AppointmentStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("appointment_status");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int")
                        .HasColumnName("appointment_type");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("dentist_id");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DentistId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(50)")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("appointment_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("area_name");

                    b.HasKey("Id");

                    b.ToTable("area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaName = "Hà Nội"
                        },
                        new
                        {
                            Id = 2,
                            AreaName = "Tp.Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 3,
                            AreaName = "Bình Dương"
                        },
                        new
                        {
                            Id = 4,
                            AreaName = "Đồng Nai"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateImage")
                        .HasColumnType("text")
                        .HasColumnName("certificate_image");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("certificate_name");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("certificate_number");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("dentist_id");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_date");

                    b.HasKey("Id");

                    b.HasIndex("CertificateNumber")
                        .IsUnique();

                    b.HasIndex("DentistId");

                    b.ToTable("certificate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateImage = "https://example.com/certificateImage.jpg",
                            CertificateName = "Medical Practice License",
                            CertificateNumber = "CERT-001",
                            DentistId = new Guid("6b4deeed-b92a-4b77-9977-5b74d9176f5a"),
                            IssuedDate = new DateTime(2024, 6, 21, 12, 36, 54, 459, DateTimeKind.Local).AddTicks(5640)
                        },
                        new
                        {
                            Id = 2,
                            CertificateImage = "https://example.com/certificateImage2.jpg",
                            CertificateName = "Dental Surgery Certification",
                            CertificateNumber = "CERT-002",
                            DentistId = new Guid("73117ab0-d927-495a-b5f1-231e50b822f4"),
                            IssuedDate = new DateTime(2022, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CertificateImage = "https://example.com/certificateImage3.jpg",
                            CertificateName = "Emergency Medicine Training",
                            CertificateNumber = "CERT-003",
                            DentistId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            IssuedDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CertificateImage = "https://example.com/certificateImage1.jpg",
                            CertificateName = "Giấy phép Hành nghề Y tế",
                            CertificateNumber = "FT5B5KAR1H",
                            DentistId = new Guid("504a1a7c-36f5-46f9-95f4-b56877a648f6"),
                            ExpiredDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CertificateImage = "",
                            CertificateName = "Bằng cấp Nha khoa",
                            CertificateNumber = "RW3KE4QEC2",
                            DentistId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            ExpiredDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuedDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CertificateImage = "",
                            CertificateName = "Chứng chỉ Phẫu thuật",
                            CertificateNumber = "KNBN151OV2",
                            DentistId = new Guid("f2953e88-904a-4732-837a-a74d52452ace"),
                            ExpiredDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuedDate = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CertificateImage = "",
                            CertificateName = "Văn bằng Y học",
                            CertificateNumber = "OSXN50N1TW",
                            DentistId = new Guid("fe72d820-913a-4a4e-afbc-e73961527cfd"),
                            ExpiredDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuedDate = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("clinic_address");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("clinic_name");

                    b.Property<short>("ClinicState")
                        .HasColumnType("smallint")
                        .HasColumnName("clinic_state");

                    b.Property<int>("EmployeeSize")
                        .HasColumnType("int")
                        .HasColumnName("employee_size");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_number");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("clinic_phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("OwnerId");

                    b.ToTable("clinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "08 Đường Alexandre de Rhodes, Phường Bến Nghé, Quận 1, Thành phố Hồ Chí Minh",
                            AreaId = 1,
                            ClinicName = "Phòng khám Quốc tế Columbia Asia Sài Gòn",
                            ClinicState = (short)2,
                            EmployeeSize = 150,
                            LicenseNumber = "HCM0001",
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838238888"
                        },
                        new
                        {
                            Id = 2,
                            Address = "285B Điện Biên Phủ, Phường Võ Thị Sáu, Quận 3, Thành phố Hồ Chí Minh",
                            AreaId = 1,
                            ClinicName = "Raffles Medical Thành phố Hồ Chí Minh",
                            ClinicState = (short)2,
                            EmployeeSize = 200,
                            LicenseNumber = "951JJPX15F",
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838240777"
                        },
                        new
                        {
                            Id = 3,
                            Address = "30 Phạm Ngọc Thạch, Phường Võ Thị Sáu, Quận 3, Thành phố Hồ Chí Minh",
                            AreaId = 1,
                            ClinicName = "Trung tâm Y tế Quốc tế (CMI)",
                            ClinicState = (short)2,
                            EmployeeSize = 100,
                            LicenseNumber = "HVAB7N3OLG",
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838272366"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Block 8, Tầng trệt của SORA Gardens II, Lô C17, Đại lộ Hùng Vương, Thành phố Mới Bình Dương, Phường Hòa Phú, Thành phố Thủ Dầu Một, Tỉnh Bình Dương",
                            AreaId = 2,
                            ClinicName = "Phòng khám Đô thị Bình Dương",
                            ClinicState = (short)1,
                            EmployeeSize = 50,
                            LicenseNumber = "Q1X7YV93UL",
                            OwnerId = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            PhoneNumber = "02742222220"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicDentist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cd_no");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("dentist_id");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DentistId");

                    b.ToTable("clinic_dentist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            DentistId = new Guid("6b4deeed-b92a-4b77-9977-5b74d9176f5a")
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            DentistId = new Guid("504a1a7c-36f5-46f9-95f4-b56877a648f6")
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            DentistId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989")
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            DentistId = new Guid("fe72d820-913a-4a4e-afbc-e73961527cfd")
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 1,
                            DentistId = new Guid("f2953e88-904a-4732-837a-a74d52452ace")
                        },
                        new
                        {
                            Id = 7,
                            ClinicId = 1,
                            DentistId = new Guid("9b22dab5-ba64-423c-8674-82af668a76cb")
                        },
                        new
                        {
                            Id = 8,
                            ClinicId = 1,
                            DentistId = new Guid("73117ab0-d927-495a-b5f1-231e50b822f4")
                        },
                        new
                        {
                            Id = 9,
                            ClinicId = 2,
                            DentistId = new Guid("fb53bc7f-7b65-4fa5-a0ba-5f789fd95be1")
                        },
                        new
                        {
                            Id = 10,
                            ClinicId = 2,
                            DentistId = new Guid("7e9ce7d7-572b-4b9c-addd-4501ecefebb7")
                        },
                        new
                        {
                            Id = 11,
                            ClinicId = 2,
                            DentistId = new Guid("013e1f35-9ab6-4bea-959b-96cec668239e")
                        },
                        new
                        {
                            Id = 12,
                            ClinicId = 3,
                            DentistId = new Guid("8b6c2e20-3b42-4464-855f-598f7971e79f")
                        },
                        new
                        {
                            Id = 13,
                            ClinicId = 3,
                            DentistId = new Guid("013e1f35-9ab6-4bea-959b-96cec668239e")
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_fb_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fb_date");

                    b.Property<string>("FeedbackDescription")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("fb_description");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerId");

                    b.ToTable("clinic_feedback");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 6, 21, 12, 36, 54, 459, DateTimeKind.Local).AddTicks(5600),
                            FeedbackDescription = "",
                            Rating = (short)1
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 2,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FeedbackDescription = "",
                            Rating = (short)3
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 3,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FeedbackDescription = "",
                            Rating = (short)4
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Dentist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("CitizenId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<short>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("dentist");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b4deeed-b92a-4b77-9977-5b74d9176f5a"),
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "Password123!",
                            PhoneNumber = "1234567890",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("504a1a7c-36f5-46f9-95f4-b56877a648f6"),
                            DateOfBirth = new DateTime(1990, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyen.vana@gmail.com",
                            FirstName = "A",
                            LastName = "Nguyễn Văn",
                            Password = "Password123!",
                            PhoneNumber = "0987654321",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            DateOfBirth = new DateTime(2003, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baongoc1234@gmail.com",
                            FirstName = "Ngọc",
                            LastName = "Bảo",
                            Password = "12345!",
                            PhoneNumber = "0912345678",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("fe72d820-913a-4a4e-afbc-e73961527cfd"),
                            DateOfBirth = new DateTime(1990, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoanganh5678@gmail.com",
                            FirstName = "Hoàng",
                            LastName = "Anh",
                            Password = "abcde@123",
                            PhoneNumber = "0987654321",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("f2953e88-904a-4732-837a-a74d52452ace"),
                            DateOfBirth = new DateTime(1985, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "linhchi987@gmail.com",
                            FirstName = "Linh",
                            LastName = "Chi",
                            Password = "qwert@567",
                            PhoneNumber = "0975123456",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("9b22dab5-ba64-423c-8674-82af668a76cb"),
                            DateOfBirth = new DateTime(1978, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trungnghia246@gmail.com",
                            FirstName = "Trung",
                            LastName = "Nghĩa",
                            Password = "nghiatrung!321",
                            PhoneNumber = "0908765432",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("73117ab0-d927-495a-b5f1-231e50b822f4"),
                            DateOfBirth = new DateTime(1989, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thuha135@gmail.com",
                            FirstName = "Thu",
                            LastName = "Hà",
                            Password = "ha!@#$123",
                            PhoneNumber = "0932145678",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("fb53bc7f-7b65-4fa5-a0ba-5f789fd95be1"),
                            DateOfBirth = new DateTime(1982, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duytung753@gmail.com",
                            FirstName = "Duy",
                            LastName = "Tùng",
                            Password = "tungDuy@789",
                            PhoneNumber = "0945671234",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("7e9ce7d7-572b-4b9c-addd-4501ecefebb7"),
                            DateOfBirth = new DateTime(1995, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maian369@gmail.com",
                            FirstName = "Mai",
                            LastName = "An",
                            Password = "AnMai@456",
                            PhoneNumber = "0923456789",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("013e1f35-9ab6-4bea-959b-96cec668239e"),
                            DateOfBirth = new DateTime(1987, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quanghai258@gmail.com",
                            FirstName = "Quang",
                            LastName = "Hải",
                            Password = "haiQuang@789",
                            PhoneNumber = "0961234567",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("9deaf970-838d-48d6-87e1-b756072d16ac"),
                            DateOfBirth = new DateTime(1993, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huonglinh147@gmail.com",
                            FirstName = "Hương",
                            LastName = "Linh",
                            Password = "Linh@1478",
                            PhoneNumber = "0918765432",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("8b6c2e20-3b42-4464-855f-598f7971e79f"),
                            DateOfBirth = new DateTime(1980, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhtuan159@gmail.com",
                            FirstName = "Minh",
                            LastName = "Tuấn",
                            Password = "tu@n159!",
                            PhoneNumber = "0983214567",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sex = (short)1
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.DentistSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly?>("WorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("working_date");

                    b.Property<TimeOnly>("WorkingEndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("working_end_time");

                    b.Property<TimeOnly>("WorkingStartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("working_start_time");

                    b.HasKey("ScheduleId", "DentistId");

                    b.HasIndex("DentistId");

                    b.ToTable("dentist_schedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Price")
                        .HasColumnType("double(10, 2)")
                        .HasColumnName("service_price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("service_name");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang CBCT",
                            Price = 50.0,
                            ServiceName = "Chụp Xquang CBCT"
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang Cephalometric",
                            Price = 80.0,
                            ServiceName = "Chụp Xquang Cephalometric"
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được khám tư vấn",
                            Price = 70.0,
                            ServiceName = "Khám tư vấn"
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang Panorama",
                            Price = 100.0,
                            ServiceName = "Chụp Xquang Panorama"
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 2,
                            Description = "Máng chống ê buốt cho răng",
                            Price = 120.0,
                            ServiceName = "Máng chống ê buốt"
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 2,
                            Description = "Máng dành cho bệnh nhân nha chu",
                            Price = 50.0,
                            ServiceName = "Máng nha chu"
                        },
                        new
                        {
                            Id = 7,
                            ClinicId = 2,
                            Description = "Lấy cao răng",
                            Price = 80.0,
                            ServiceName = "Lấy cao răng 2 hàm"
                        },
                        new
                        {
                            Id = 8,
                            ClinicId = 2,
                            Description = "Trám răng để răng đẹp và tốt hơn",
                            Price = 70.0,
                            ServiceName = "Điều trị tủy"
                        },
                        new
                        {
                            Id = 9,
                            ClinicId = 3,
                            Description = "Hàn thẩm mỹ cho bệnh nhân",
                            Price = 100.0,
                            ServiceName = "Hàn thẩm mỹ"
                        },
                        new
                        {
                            Id = 10,
                            ClinicId = 3,
                            Description = "Hàn cổ răng cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Hàn cổ răng"
                        },
                        new
                        {
                            Id = 11,
                            ClinicId = 3,
                            Description = "Hàn răng sâu cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Hàn răng sâu"
                        },
                        new
                        {
                            Id = 12,
                            ClinicId = 3,
                            Description = "Tiểu phẫu dành cho bệnh nhân nha chu",
                            Price = 120.0,
                            ServiceName = "Tiểu phẫu nha chu"
                        },
                        new
                        {
                            Id = 13,
                            ClinicId = 4,
                            Description = "Ngừa sâu răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Sealant ngừa sâu răng"
                        },
                        new
                        {
                            Id = 14,
                            ClinicId = 4,
                            Description = "Ngừa sâu răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Bôi fluoride dự phòng sâu răng"
                        },
                        new
                        {
                            Id = 15,
                            ClinicId = 4,
                            Description = "Điều trị tủy răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Điều trị tủy răng sữa nhiều chân"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("treatment_detail_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppointmentId")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("treatment_detail");
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.HasOne("Backend.BO.Entities.TreatmentDetail", "TreatmentDetail")
                        .WithOne("Appointment")
                        .HasForeignKey("Backend.BO.Entities.Appointment", "AppointmentId")
                        .HasPrincipalKey("Backend.BO.Entities.TreatmentDetail", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Customer");

                    b.Navigation("Dentist");

                    b.Navigation("TreatmentDetail");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.HasOne("Backend.BO.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.HasOne("Backend.BO.Entities.Dentist", "Dentist")
                        .WithMany("Certificates")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.HasOne("Backend.BO.Entities.Area", "Area")
                        .WithMany("Clinics")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicDentist", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("ClinicDentists")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Dentist", "Dentist")
                        .WithMany("ClinicDentists")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Dentist");
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicFeedback", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("ClinicFeedbacks")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Customer")
                        .WithMany("ClinicFeedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Backend.BO.Entities.DentistSchedule", b =>
                {
                    b.HasOne("Backend.BO.Entities.Dentist", "Dentist")
                        .WithMany("DentistSchedules")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("Services")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClinicFeedbacks");
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Backend.BO.Entities.Area", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClinicDentists");

                    b.Navigation("ClinicFeedbacks");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Backend.BO.Entities.Dentist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("ClinicDentists");

                    b.Navigation("DentistSchedules");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
