// <auto-generated />
using System;
using Backend.DAL.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DAL.Databases.Migrations
{
    [DbContext(typeof(DenticareContext))]
    partial class DenticareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<short>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69469c42-aa53-4557-a2ae-3d4b7e7c1314"),
                            Address = "123 Main St, Anytown, USA",
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "Password123!",
                            PhoneNumber = "1234567890",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("51003da6-1b0f-4ba3-9242-d29cf848bde6"),
                            Address = "456 Oak St, Anytown, USA",
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "Password123!",
                            PhoneNumber = "2345678901",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("5b9985bd-64b5-448c-b9c7-7392d1730ebb"),
                            Address = "789 Pine St, Anytown, USA",
                            DateOfBirth = new DateTime(1980, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Password = "Password123!",
                            PhoneNumber = "3456789012",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("169a9899-ad4c-456c-ba56-d22085060aac"),
                            Email = "adminexample@gmail.com",
                            FirstName = "Admin",
                            Password = "reallystrongpass!123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "SA",
                            Sex = (short)0
                        },
                        new
                        {
                            Id = new Guid("a1a01334-5319-4c74-a462-932e7c380830"),
                            Address = "Tân Bình, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhatvmse172011@fpt.edu.vn",
                            FirstName = "Nhật",
                            LastName = "Vũ Minh",
                            Password = "Password123!",
                            PhoneNumber = "0366412667",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("553d8885-3c1c-439c-86c9-71a71b74ac13"),
                            Address = "Thủ Đức, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bangtlhss170429@fpt.edu.vn",
                            FirstName = "Bằng",
                            LastName = "Trần Lê Hữu",
                            Password = "Password123!",
                            PhoneNumber = "0384691554",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            Address = "phường Chánh Nghĩa, Tp.Thủ Dầu Một, tỉnh Bình Dương",
                            DateOfBirth = new DateTime(2003, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vulongbinhduong@gmail.com",
                            FirstName = "Long",
                            LastName = "Vũ",
                            Password = "xxx123!",
                            PhoneNumber = "0866742614",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            Address = "Tp.Sóc Trăng",
                            DateOfBirth = new DateTime(2003, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huyquac@gmail.com",
                            FirstName = "Huy",
                            LastName = "Quách Hoàng",
                            Password = "xxx123!",
                            PhoneNumber = "0332877905",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_id");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<short>("AppointmentStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("appointment_status");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int")
                        .HasColumnName("appointment_type");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("AppointmentId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.ToTable("appointment_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("area_name");

                    b.HasKey("Id");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaName = "Hà Nội"
                        },
                        new
                        {
                            Id = 2,
                            AreaName = "Tp.Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 3,
                            AreaName = "Bình Dương"
                        },
                        new
                        {
                            Id = 4,
                            AreaName = "Đồng Nai"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateImage")
                        .HasColumnType("text")
                        .HasColumnName("certificate_image");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("certificate_name");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_date");

                    b.HasKey("Id");

                    b.ToTable("certificate");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("clinic_address");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("clinic_name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_number");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int")
                        .HasColumnName("no_of_employees");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("clinic_phone_number");

                    b.HasKey("Id");

                    b.ToTable("clinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "08 Alexandre de Rhodes St., Ben Nghe Ward, District 1, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Columbia Asia Saigon International Clinic",
                            LicenseNumber = "HCM0001",
                            NumberOfEmployees = 150,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838238888"
                        },
                        new
                        {
                            Id = 2,
                            Address = "285B Dien Bien Phu, Vo Thi Sau Ward, District 3, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Raffles Medical Ho Chi Minh",
                            LicenseNumber = "HCM0002",
                            NumberOfEmployees = 200,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838240777"
                        },
                        new
                        {
                            Id = 3,
                            Address = "30 Pham Ngoc Thach, Ward Vo Thi Sau, District 3, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Centre Médical International (CMI)",
                            LicenseNumber = "HCM0003",
                            NumberOfEmployees = 100,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838272366"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Block 8, Ground floor of SORA Gardens II, Lot C17, Hung Vuong Boulevard, Binh Duong New City, Hoa Phu Ward, Thu Dau Mot City, Binh Duong Province",
                            AreaId = 2,
                            ClinicName = "Binh Duong Urban Clinic",
                            LicenseNumber = "BDU12345",
                            NumberOfEmployees = 50,
                            OwnerId = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            PhoneNumber = "02742222220"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("combo_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("combo_description");

                    b.HasKey("Id");

                    b.ToTable("combo");
                });

            modelBuilder.Entity("Backend.BO.Entities.ComboService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.ToTable("combo_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly?>("WorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("working_date");

                    b.HasKey("ScheduleId");

                    b.ToTable("doctor_schedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("working_hour_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("doctor_working_hours");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Price")
                        .HasColumnType("double(10, 2)")
                        .HasColumnName("service_price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("service_name");

                    b.HasKey("Id");

                    b.ToTable("service");
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("treatment_detail_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.HasKey("Id");

                    b.ToTable("treatment_detail");
                });
#pragma warning restore 612, 618
        }
    }
}
