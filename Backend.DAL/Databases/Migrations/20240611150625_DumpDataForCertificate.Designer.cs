// <auto-generated />
using System;
using Backend.DAL.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DAL.Databases.Migrations
{
    [DbContext(typeof(DenticareContext))]
    [Migration("20240611150625_DumpDataForCertificate")]
    partial class DumpDataForCertificate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("CitizenId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("citizen_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("char(4)")
                        .HasColumnName("role");

                    b.Property<short>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe3589a9-c44c-4af8-949c-e613be711d96"),
                            Address = "123 Main St, Anytown, USA",
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "Password123!",
                            PhoneNumber = "1234567890",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("033f3d07-b144-4332-b449-470f93a2c56e"),
                            Address = "456 Lê Lợi, Hồ Chí Minh City, Vietnam",
                            DateOfBirth = new DateTime(1990, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyen.vana@gmail.com",
                            FirstName = "A",
                            LastName = "Nguyễn Văn",
                            Password = "Password123!",
                            PhoneNumber = "0987654321",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("57b45576-2a11-4751-acec-4d6a4847d0ee"),
                            Address = "789 Trần Hưng Đạo, Hà Nội, Vietnam",
                            DateOfBirth = new DateTime(1988, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tran.thib@example.com",
                            FirstName = "B",
                            LastName = "Trần Thị",
                            Password = "Password123!",
                            PhoneNumber = "0976543210",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("35115282-c79c-4c88-89b1-cb9a940e0115"),
                            Address = "phường Phước Long A, Q.9, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(1987, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janetran639@gmail.com",
                            FirstName = "Hà",
                            LastName = "Phùng Trần Mai",
                            Password = "999doahoahong@",
                            PhoneNumber = "0902694265",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("a294d2cf-413d-486d-aa8c-b623555d2ac0"),
                            Address = "456 Oak St, Anytown, USA",
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "Password123!",
                            PhoneNumber = "2345678901",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)2
                        },
                        new
                        {
                            Id = new Guid("b2891139-fa92-41ee-bc2f-5fb4f2fea682"),
                            Address = "789 Pine St, Anytown, USA",
                            DateOfBirth = new DateTime(1980, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Password = "Password123!",
                            PhoneNumber = "3456789012",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("ec0fd3bf-8d13-444a-bdac-923cfa091310"),
                            Email = "adminexample@gmail.com",
                            FirstName = "Admin",
                            Password = "reallystrongpass!123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "SA",
                            Sex = (short)0
                        },
                        new
                        {
                            Id = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            Address = "Tân Bình, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhatvmse172011@fpt.edu.vn",
                            FirstName = "Nhật",
                            LastName = "Vũ Minh",
                            Password = "Password123!",
                            PhoneNumber = "0366412667",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("cd1a49cd-0e2e-4a3e-8518-77be78230259"),
                            Address = "Thủ Đức, Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bangtlhss170429@fpt.edu.vn",
                            FirstName = "Bằng",
                            LastName = "Trần Lê Hữu",
                            Password = "Password123!",
                            PhoneNumber = "0384691554",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            Address = "phường Chánh Nghĩa, Tp.Thủ Dầu Một, tỉnh Bình Dương",
                            DateOfBirth = new DateTime(2003, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vulongbinhduong@gmail.com",
                            FirstName = "Long",
                            LastName = "Vũ",
                            Password = "xxx123!",
                            PhoneNumber = "0866742614",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            Address = "Tp.Sóc Trăng",
                            DateOfBirth = new DateTime(2003, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huyquac@gmail.com",
                            FirstName = "Huy",
                            LastName = "Quách Hoàng",
                            Password = "xxx123!",
                            PhoneNumber = "0332877905",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CO",
                            Sex = (short)1
                        },
                        new
                        {
                            Id = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            Address = "Tp.Hồ Chí Minh",
                            DateOfBirth = new DateTime(2003, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baongoc1234@gmail.com",
                            FirstName = "Ngọc",
                            LastName = "Bảo",
                            Password = "12345!",
                            PhoneNumber = "0912345678",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "DE",
                            Sex = (short)1
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_id");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<short>("AppointmentStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("appointment_status");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int")
                        .HasColumnName("appointment_type");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("appointment_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("area_name");

                    b.HasKey("Id");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaName = "Hà Nội"
                        },
                        new
                        {
                            Id = 2,
                            AreaName = "Tp.Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 3,
                            AreaName = "Bình Dương"
                        },
                        new
                        {
                            Id = 4,
                            AreaName = "Đồng Nai"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateImage")
                        .HasColumnType("text")
                        .HasColumnName("certificate_image");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("certificate_name");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_date");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("certificate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateImage = "https://example.com/certificateImage.jpg",
                            CertificateName = "Medical Practice License",
                            DoctorId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            IssuedDate = new DateTime(2024, 6, 11, 22, 6, 24, 368, DateTimeKind.Local).AddTicks(9923)
                        },
                        new
                        {
                            Id = 2,
                            CertificateImage = "https://example.com/certificateImage2.jpg",
                            CertificateName = "Dental Surgery Certification",
                            DoctorId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            IssuedDate = new DateTime(2022, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CertificateImage = "https://example.com/certificateImage3.jpg",
                            CertificateName = "Emergency Medicine Training",
                            DoctorId = new Guid("0666d393-5502-4056-a2d4-b5433fa5d989"),
                            IssuedDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("clinic_address");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("area_id");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("clinic_name");

                    b.Property<short>("ClinicState")
                        .HasColumnType("smallint")
                        .HasColumnName("clinic_state");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_number");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int")
                        .HasColumnName("no_of_employees");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("clinic_phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("OwnerId");

                    b.ToTable("clinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "08 Alexandre de Rhodes St., Ben Nghe Ward, District 1, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Columbia Asia Saigon International Clinic",
                            ClinicState = (short)1,
                            LicenseNumber = "HCM0001",
                            NumberOfEmployees = 150,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838238888"
                        },
                        new
                        {
                            Id = 2,
                            Address = "285B Dien Bien Phu, Vo Thi Sau Ward, District 3, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Raffles Medical Ho Chi Minh",
                            ClinicState = (short)1,
                            LicenseNumber = "HCM0002",
                            NumberOfEmployees = 200,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838240777"
                        },
                        new
                        {
                            Id = 3,
                            Address = "30 Pham Ngoc Thach, Ward Vo Thi Sau, District 3, Ho Chi Minh City",
                            AreaId = 1,
                            ClinicName = "Centre Médical International (CMI)",
                            ClinicState = (short)1,
                            LicenseNumber = "HCM0003",
                            NumberOfEmployees = 100,
                            OwnerId = new Guid("4d219f08-6205-4ded-bc09-4c148902fb35"),
                            PhoneNumber = "02838272366"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Block 8, Ground floor of SORA Gardens II, Lot C17, Hung Vuong Boulevard, Binh Duong New City, Hoa Phu Ward, Thu Dau Mot City, Binh Duong Province",
                            AreaId = 2,
                            ClinicName = "Binh Duong Urban Clinic",
                            ClinicState = (short)1,
                            LicenseNumber = "BDU12345",
                            NumberOfEmployees = 50,
                            OwnerId = new Guid("88c95c5d-219b-445e-9c3f-28d92a5d07f7"),
                            PhoneNumber = "02742222220"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cd_no");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.ToTable("clinic_doctors");
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_fb_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fb_date");

                    b.Property<string>("FeedbackDescription")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("fb_description");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerId");

                    b.ToTable("clinic_feedback");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 6, 11, 22, 6, 24, 368, DateTimeKind.Local).AddTicks(9890),
                            FeedbackDescription = "The clinic was clean and the staff were courteous, but the waiting time was longer than expected.",
                            Rating = (short)3
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 2,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FeedbackDescription = "Excellent service! The doctor was very thorough and answered all my questions.",
                            Rating = (short)2
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 3,
                            CustomerId = new Guid("455565de-ce04-45b6-8183-1a1f9d414a93"),
                            FeedbackDate = new DateTime(2024, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FeedbackDescription = "The clinic environment was good, but the appointment was delayed by 30 minutes.",
                            Rating = (short)4
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("combo_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("combo_description");

                    b.HasKey("Id");

                    b.ToTable("combo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComboName = "Khám tư vấn",
                            Description = "Mục gồm các vấn đề liên quan đến Khám tư vấn"
                        },
                        new
                        {
                            Id = 2,
                            ComboName = "Nha khoa tổng quát",
                            Description = "Mục gồm các vấn đề liên quan đến Nha khoa tổng quát"
                        },
                        new
                        {
                            Id = 3,
                            ComboName = "Nha khoa trẻ em",
                            Description = "Mục gồm các vấn đề liên quan đến Nha khoa trẻ em"
                        },
                        new
                        {
                            Id = 4,
                            ComboName = "Chỉnh nha",
                            Description = "Mục gồm các vấn đề liên quan đến Chỉnh nha"
                        },
                        new
                        {
                            Id = 5,
                            ComboName = "Cấy ghép Implant",
                            Description = "Mục gồm các vấn đề liên quan đến Cấy ghép Implant"
                        },
                        new
                        {
                            Id = 6,
                            ComboName = "Nhổ răng",
                            Description = "Mục gồm các vấn đề liên quan đến Nhổ răng"
                        },
                        new
                        {
                            Id = 7,
                            ComboName = "Nha khoa thẩm mỹ",
                            Description = "Mục gồm các vấn đề liên quan đến Nha khoa thẩm mỹ"
                        },
                        new
                        {
                            Id = 8,
                            ComboName = "Khác",
                            Description = "Mục gồm các vấn đề khác ngoài các mục đã có"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.ComboService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("combo_service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComboId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComboId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            ComboId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            ComboId = 1,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 5,
                            ComboId = 2,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 6,
                            ComboId = 2,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 7,
                            ComboId = 2,
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 8,
                            ComboId = 2,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 9,
                            ComboId = 2,
                            ServiceId = 9
                        },
                        new
                        {
                            Id = 10,
                            ComboId = 2,
                            ServiceId = 10
                        },
                        new
                        {
                            Id = 11,
                            ComboId = 2,
                            ServiceId = 11
                        },
                        new
                        {
                            Id = 12,
                            ComboId = 2,
                            ServiceId = 12
                        },
                        new
                        {
                            Id = 13,
                            ComboId = 3,
                            ServiceId = 13
                        },
                        new
                        {
                            Id = 14,
                            ComboId = 3,
                            ServiceId = 14
                        },
                        new
                        {
                            Id = 15,
                            ComboId = 3,
                            ServiceId = 15
                        },
                        new
                        {
                            Id = 16,
                            ComboId = 3,
                            ServiceId = 16
                        },
                        new
                        {
                            Id = 17,
                            ComboId = 3,
                            ServiceId = 17
                        },
                        new
                        {
                            Id = 18,
                            ComboId = 3,
                            ServiceId = 18
                        },
                        new
                        {
                            Id = 19,
                            ComboId = 3,
                            ServiceId = 19
                        },
                        new
                        {
                            Id = 20,
                            ComboId = 4,
                            ServiceId = 20
                        },
                        new
                        {
                            Id = 21,
                            ComboId = 4,
                            ServiceId = 21
                        },
                        new
                        {
                            Id = 22,
                            ComboId = 4,
                            ServiceId = 22
                        },
                        new
                        {
                            Id = 23,
                            ComboId = 4,
                            ServiceId = 23
                        },
                        new
                        {
                            Id = 24,
                            ComboId = 4,
                            ServiceId = 24
                        },
                        new
                        {
                            Id = 25,
                            ComboId = 4,
                            ServiceId = 25
                        },
                        new
                        {
                            Id = 26,
                            ComboId = 5,
                            ServiceId = 26
                        },
                        new
                        {
                            Id = 27,
                            ComboId = 5,
                            ServiceId = 27
                        },
                        new
                        {
                            Id = 28,
                            ComboId = 5,
                            ServiceId = 28
                        },
                        new
                        {
                            Id = 29,
                            ComboId = 5,
                            ServiceId = 29
                        },
                        new
                        {
                            Id = 30,
                            ComboId = 5,
                            ServiceId = 30
                        },
                        new
                        {
                            Id = 31,
                            ComboId = 5,
                            ServiceId = 31
                        },
                        new
                        {
                            Id = 32,
                            ComboId = 6,
                            ServiceId = 32
                        },
                        new
                        {
                            Id = 33,
                            ComboId = 6,
                            ServiceId = 33
                        },
                        new
                        {
                            Id = 34,
                            ComboId = 6,
                            ServiceId = 34
                        },
                        new
                        {
                            Id = 35,
                            ComboId = 6,
                            ServiceId = 35
                        },
                        new
                        {
                            Id = 36,
                            ComboId = 6,
                            ServiceId = 36
                        },
                        new
                        {
                            Id = 37,
                            ComboId = 6,
                            ServiceId = 37
                        },
                        new
                        {
                            Id = 38,
                            ComboId = 7,
                            ServiceId = 38
                        },
                        new
                        {
                            Id = 39,
                            ComboId = 7,
                            ServiceId = 39
                        },
                        new
                        {
                            Id = 40,
                            ComboId = 7,
                            ServiceId = 40
                        },
                        new
                        {
                            Id = 41,
                            ComboId = 7,
                            ServiceId = 41
                        },
                        new
                        {
                            Id = 42,
                            ComboId = 7,
                            ServiceId = 42
                        },
                        new
                        {
                            Id = 43,
                            ComboId = 7,
                            ServiceId = 43
                        },
                        new
                        {
                            Id = 44,
                            ComboId = 7,
                            ServiceId = 44
                        },
                        new
                        {
                            Id = 45,
                            ComboId = 7,
                            ServiceId = 45
                        },
                        new
                        {
                            Id = 46,
                            ComboId = 8,
                            ServiceId = 46
                        },
                        new
                        {
                            Id = 47,
                            ComboId = 8,
                            ServiceId = 47
                        },
                        new
                        {
                            Id = 48,
                            ComboId = 1,
                            ServiceId = 48
                        },
                        new
                        {
                            Id = 49,
                            ComboId = 1,
                            ServiceId = 49
                        },
                        new
                        {
                            Id = 50,
                            ComboId = 2,
                            ServiceId = 50
                        },
                        new
                        {
                            Id = 51,
                            ComboId = 2,
                            ServiceId = 51
                        },
                        new
                        {
                            Id = 52,
                            ComboId = 1,
                            ServiceId = 52
                        },
                        new
                        {
                            Id = 53,
                            ComboId = 1,
                            ServiceId = 53
                        },
                        new
                        {
                            Id = 54,
                            ComboId = 2,
                            ServiceId = 54
                        },
                        new
                        {
                            Id = 55,
                            ComboId = 2,
                            ServiceId = 55
                        },
                        new
                        {
                            Id = 56,
                            ComboId = 1,
                            ServiceId = 56
                        },
                        new
                        {
                            Id = 57,
                            ComboId = 1,
                            ServiceId = 57
                        },
                        new
                        {
                            Id = 58,
                            ComboId = 2,
                            ServiceId = 58
                        },
                        new
                        {
                            Id = 59,
                            ComboId = 2,
                            ServiceId = 59
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly?>("WorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("working_date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_schedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("working_hour_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("schedule_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("doctor_working_hours");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Price")
                        .HasColumnType("double(10, 2)")
                        .HasColumnName("service_price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("service_name");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang CBCT",
                            Price = 50.0,
                            ServiceName = "Chụp Xquang CBCT"
                        },
                        new
                        {
                            Id = 2,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang Cephalometric",
                            Price = 80.0,
                            ServiceName = "Chụp Xquang Cephalometric"
                        },
                        new
                        {
                            Id = 3,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được khám tư vấn",
                            Price = 70.0,
                            ServiceName = "Khám tư vấn"
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            Description = "Bệnh nhân sẽ được Chụp Xquang Panorama",
                            Price = 100.0,
                            ServiceName = "Chụp Xquang Panorama"
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 1,
                            Description = "Máng chống ê buốt cho răng",
                            Price = 120.0,
                            ServiceName = "Máng chống ê buốt"
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 1,
                            Description = "Máng dành cho bệnh nhân nha chu",
                            Price = 50.0,
                            ServiceName = "Máng nha chu"
                        },
                        new
                        {
                            Id = 7,
                            ClinicId = 1,
                            Description = "Lấy cao răng",
                            Price = 80.0,
                            ServiceName = "Lấy cao răng 2 hàm"
                        },
                        new
                        {
                            Id = 8,
                            ClinicId = 1,
                            Description = "Trám răng để răng đẹp và tốt hơn",
                            Price = 70.0,
                            ServiceName = "Điều trị tủy"
                        },
                        new
                        {
                            Id = 9,
                            ClinicId = 1,
                            Description = "Hàn thẩm mỹ cho bệnh nhân",
                            Price = 100.0,
                            ServiceName = "Hàn thẩm mỹ"
                        },
                        new
                        {
                            Id = 10,
                            ClinicId = 1,
                            Description = "Hàn cổ răng cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Hàn cổ răng"
                        },
                        new
                        {
                            Id = 11,
                            ClinicId = 1,
                            Description = "Hàn răng sâu cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Hàn răng sâu"
                        },
                        new
                        {
                            Id = 12,
                            ClinicId = 1,
                            Description = "Tiểu phẫu dành cho bệnh nhân nha chu",
                            Price = 120.0,
                            ServiceName = "Tiểu phẫu nha chu"
                        },
                        new
                        {
                            Id = 13,
                            ClinicId = 1,
                            Description = "Ngừa sâu răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Sealant ngừa sâu răng"
                        },
                        new
                        {
                            Id = 14,
                            ClinicId = 1,
                            Description = "Ngừa sâu răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Bôi fluoride dự phòng sâu răng"
                        },
                        new
                        {
                            Id = 15,
                            ClinicId = 1,
                            Description = "Điều trị tủy răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Điều trị tủy răng sữa nhiều chân"
                        },
                        new
                        {
                            Id = 16,
                            ClinicId = 1,
                            Description = "Điều trị tủy răng cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Điều trị tủy răng sữa 1 chân"
                        },
                        new
                        {
                            Id = 17,
                            ClinicId = 1,
                            Description = "Hàn răng sữa cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Hàn răng sữa"
                        },
                        new
                        {
                            Id = 18,
                            ClinicId = 1,
                            Description = "Nhổ răng tiêm thuốc tê cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Nhổ răng sữa tê tiêm"
                        },
                        new
                        {
                            Id = 19,
                            ClinicId = 1,
                            Description = "Nhổ răng bôi thuốc tê cho trẻ em",
                            Price = 120.0,
                            ServiceName = "Nhổ răng sữa tê bôi"
                        },
                        new
                        {
                            Id = 20,
                            ClinicId = 1,
                            Description = "Hàm Twinblock",
                            Price = 120.0,
                            ServiceName = "Hàm Twinblock"
                        },
                        new
                        {
                            Id = 21,
                            ClinicId = 1,
                            Description = "Hàm nong",
                            Price = 120.0,
                            ServiceName = "Hàm nong"
                        },
                        new
                        {
                            Id = 22,
                            ClinicId = 1,
                            Description = "Chỉnh nha bằng khay trong suốt Invisalign cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Chỉnh nha bằng khay trong suốt Invisalign"
                        },
                        new
                        {
                            Id = 23,
                            ClinicId = 1,
                            Description = "Chỉnh nha bằng mắc cài sứ 2 hàm cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Chỉnh nha bằng mắc cài sứ 2 hàm"
                        },
                        new
                        {
                            Id = 24,
                            ClinicId = 1,
                            Description = "Chỉnh nha bằng mắc cài kim loại 2 hàm cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Chỉnh nha bằng mắc cài kim loại 2 hàm"
                        },
                        new
                        {
                            Id = 25,
                            ClinicId = 1,
                            Description = "Hàm duy trì sau chỉnh nha cho bệnh nhân",
                            Price = 120.0,
                            ServiceName = "Hàm duy trì sau chỉnh nha"
                        },
                        new
                        {
                            Id = 26,
                            ClinicId = 1,
                            Description = "Implant",
                            Price = 120.0,
                            ServiceName = "Cấy Implant All-on-6"
                        },
                        new
                        {
                            Id = 27,
                            ClinicId = 1,
                            Description = "Implant",
                            Price = 120.0,
                            ServiceName = "Cấy Implant All-on-4"
                        },
                        new
                        {
                            Id = 28,
                            ClinicId = 1,
                            Description = "Implant răng hàm",
                            Price = 120.0,
                            ServiceName = "Cấy Implant Hàn Quốc răng hàm"
                        },
                        new
                        {
                            Id = 29,
                            ClinicId = 1,
                            Description = "Implant răng cửa",
                            Price = 120.0,
                            ServiceName = "Cấy Implant Hàn Quốc răng cửa"
                        },
                        new
                        {
                            Id = 30,
                            ClinicId = 1,
                            Description = "Ghép xương",
                            Price = 120.0,
                            ServiceName = "Ghép xương"
                        },
                        new
                        {
                            Id = 31,
                            ClinicId = 1,
                            Description = "Nâng xoang",
                            Price = 120.0,
                            ServiceName = "Nâng xoang"
                        },
                        new
                        {
                            Id = 32,
                            ClinicId = 1,
                            Description = "Nhổ răng khôn",
                            Price = 120.0,
                            ServiceName = "Nhổ răng khôn (răng số 8) mọc ngầm"
                        },
                        new
                        {
                            Id = 33,
                            ClinicId = 1,
                            Description = "Nhổ răng khôn",
                            Price = 120.0,
                            ServiceName = "Nhổ răng khôn (răng số 8) mọc lệch"
                        },
                        new
                        {
                            Id = 34,
                            ClinicId = 1,
                            Description = "Nhổ răng khôn",
                            Price = 120.0,
                            ServiceName = "Nhổ răng khôn (răng số 8) mọc thẳng"
                        },
                        new
                        {
                            Id = 35,
                            ClinicId = 1,
                            Description = "Nhổ chân răng",
                            Price = 120.0,
                            ServiceName = "Nhổ chân răng"
                        },
                        new
                        {
                            Id = 36,
                            ClinicId = 1,
                            Description = "Nhổ răng hàm",
                            Price = 120.0,
                            ServiceName = "Nhổ răng hàm"
                        },
                        new
                        {
                            Id = 37,
                            ClinicId = 1,
                            Description = "Nhổ răng cửa",
                            Price = 120.0,
                            ServiceName = "Nhổ răng cửa"
                        },
                        new
                        {
                            Id = 38,
                            ClinicId = 1,
                            Description = "Onlay/inlay sứ kim loại",
                            Price = 120.0,
                            ServiceName = "Onlay/inlay sứ kim loại"
                        },
                        new
                        {
                            Id = 39,
                            ClinicId = 1,
                            Description = "Hàm nhựa dẻo tháo lắp",
                            Price = 120.0,
                            ServiceName = "Hàm nhựa dẻo tháo lắp"
                        },
                        new
                        {
                            Id = 40,
                            ClinicId = 1,
                            Description = "Chụp sứ/veneer sứ Emax HT",
                            Price = 120.0,
                            ServiceName = "Chụp sứ/veneer sứ Emax HT"
                        },
                        new
                        {
                            Id = 41,
                            ClinicId = 1,
                            Description = "Chụp sứ/Veneer sứ Emax",
                            Price = 120.0,
                            ServiceName = "Chụp sứ/Veneer sứ Emax"
                        },
                        new
                        {
                            Id = 42,
                            ClinicId = 1,
                            Description = "Chụp sứ Zirconia",
                            Price = 120.0,
                            ServiceName = "Chụp sứ Zirconia"
                        },
                        new
                        {
                            Id = 43,
                            ClinicId = 1,
                            Description = "Chụp sứ Titan",
                            Price = 120.0,
                            ServiceName = "Chụp sứ Titan"
                        },
                        new
                        {
                            Id = 44,
                            ClinicId = 1,
                            Description = "Chụp sứ kim loại thường",
                            Price = 120.0,
                            ServiceName = "Chụp sứ kim loại thường"
                        },
                        new
                        {
                            Id = 45,
                            ClinicId = 1,
                            Description = "Chụp composite",
                            Price = 120.0,
                            ServiceName = "Chụp composite"
                        },
                        new
                        {
                            Id = 46,
                            ClinicId = 1,
                            Description = "Phẫu thuật tạo hình lợi",
                            Price = 120.0,
                            ServiceName = "Phẫu thuật tạo hình lợi"
                        },
                        new
                        {
                            Id = 47,
                            ClinicId = 1,
                            Description = "Hàm điều chỉnh khớp thái dương hàm",
                            Price = 120.0,
                            ServiceName = "Hàm điều chỉnh khớp thái dương hàm"
                        },
                        new
                        {
                            Id = 48,
                            ClinicId = 2,
                            Description = "Khám và tư vấn",
                            Price = 120.0,
                            ServiceName = "Khám tư vấn"
                        },
                        new
                        {
                            Id = 49,
                            ClinicId = 2,
                            Description = "Chụp Xquang",
                            Price = 120.0,
                            ServiceName = "Chụp Xquang"
                        },
                        new
                        {
                            Id = 50,
                            ClinicId = 2,
                            Description = "Lấy cao răng",
                            Price = 120.0,
                            ServiceName = "Lấy cao răng"
                        },
                        new
                        {
                            Id = 51,
                            ClinicId = 2,
                            Description = "Máng chống ê buốt",
                            Price = 120.0,
                            ServiceName = "Máng chống ê buốt"
                        },
                        new
                        {
                            Id = 52,
                            ClinicId = 3,
                            Description = "Khám và tư vấn",
                            Price = 120.0,
                            ServiceName = "Khám tư vấn"
                        },
                        new
                        {
                            Id = 53,
                            ClinicId = 3,
                            Description = "Chụp Xquang",
                            Price = 120.0,
                            ServiceName = "Chụp Xquang"
                        },
                        new
                        {
                            Id = 54,
                            ClinicId = 3,
                            Description = "Lấy cao răng",
                            Price = 120.0,
                            ServiceName = "Lấy cao răng"
                        },
                        new
                        {
                            Id = 55,
                            ClinicId = 3,
                            Description = "Máng chống ê buốt",
                            Price = 120.0,
                            ServiceName = "Máng chống ê buốt"
                        },
                        new
                        {
                            Id = 56,
                            ClinicId = 4,
                            Description = "Khám và tư vấn",
                            Price = 120.0,
                            ServiceName = "Khám tư vấn"
                        },
                        new
                        {
                            Id = 57,
                            ClinicId = 4,
                            Description = "Chụp Xquang",
                            Price = 120.0,
                            ServiceName = "Chụp Xquang"
                        },
                        new
                        {
                            Id = 58,
                            ClinicId = 4,
                            Description = "Lấy cao răng",
                            Price = 120.0,
                            ServiceName = "Lấy cao răng"
                        },
                        new
                        {
                            Id = 59,
                            ClinicId = 4,
                            Description = "Máng chống ê buốt",
                            Price = 120.0,
                            ServiceName = "Máng chống ê buốt"
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("treatment_detail_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.HasKey("Id");

                    b.ToTable("treatment_detail");
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.HasOne("Backend.BO.Entities.TreatmentDetail", "TreatmentDetail")
                        .WithOne("Appointment")
                        .HasForeignKey("Backend.BO.Entities.Appointment", "AppointmentId")
                        .HasPrincipalKey("Backend.BO.Entities.TreatmentDetail", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Customer");

                    b.Navigation("TreatmentDetail");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.HasOne("Backend.BO.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.HasOne("Backend.BO.Commons.User", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.HasOne("Backend.BO.Entities.Area", "Area")
                        .WithMany("Clinics")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicDoctor", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Doctor")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Backend.BO.Entities.ClinicFeedback", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("ClinicFeedbacks")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.BO.Commons.User", "Customer")
                        .WithMany("ClinicFeedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Backend.BO.Entities.ComboService", b =>
                {
                    b.HasOne("Backend.BO.Entities.Combo", "Combo")
                        .WithMany("ComboServices")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.BO.Entities.Service", "Service")
                        .WithMany("ComboServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("Backend.BO.Commons.User", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorWorkingHours", b =>
                {
                    b.HasOne("Backend.BO.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany("DoctorWorkingHours")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSchedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.HasOne("Backend.BO.Entities.Clinic", "Clinic")
                        .WithMany("Services")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("ClinicDoctors");

                    b.Navigation("ClinicFeedbacks");

                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Backend.BO.Entities.Area", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClinicDoctors");

                    b.Navigation("ClinicFeedbacks");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Backend.BO.Entities.Combo", b =>
                {
                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.Navigation("DoctorWorkingHours");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ComboServices");
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
