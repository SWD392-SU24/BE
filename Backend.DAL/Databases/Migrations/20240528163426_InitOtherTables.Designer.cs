// <auto-generated />
using System;
using Backend.DAL.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.DAL.Databases.Migrations
{
    [DbContext(typeof(DenticareContext))]
    [Migration("20240528163426_InitOtherTables")]
    partial class InitOtherTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.BO.Commons.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<short>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("381f00a3-cf01-43a8-8800-54c4e246b79f"),
                            Email = "adminexample@gmail.com",
                            FirstName = "Admin",
                            Password = "reallystrongpass!123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "SA",
                            Sex = (short)0
                        },
                        new
                        {
                            Id = new Guid("c71d3dd1-71b1-45df-86f3-7864ec2974be"),
                            Email = "trung@example.com",
                            FirstName = "Trung",
                            LastName = "Nguyen",
                            Password = "password123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)0
                        },
                        new
                        {
                            Id = new Guid("49fd2fe3-9dc0-409f-b515-cd09cfd7b84b"),
                            Email = "linh@example.com",
                            FirstName = "Linh",
                            LastName = "Pham",
                            Password = "password456",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "CUS",
                            Sex = (short)0
                        });
                });

            modelBuilder.Entity("Backend.BO.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("appointment_id");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<short>("AppointmentStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("appointment_status");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int")
                        .HasColumnName("appointment_type");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("AppointmentId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("Backend.BO.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.ToTable("appointment_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateImage")
                        .HasColumnType("text")
                        .HasColumnName("certificate_image");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("certificate_name");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_date");

                    b.HasKey("Id");

                    b.ToTable("certificate");
                });

            modelBuilder.Entity("Backend.BO.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("clinic_address");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("clinic_name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_number");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int")
                        .HasColumnName("no_of_employees");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("clinic_phone_number");

                    b.HasKey("Id");

                    b.ToTable("clinic");
                });

            modelBuilder.Entity("Backend.BO.Entities.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("combo_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("combo_description");

                    b.HasKey("Id");

                    b.ToTable("combo");
                });

            modelBuilder.Entity("Backend.BO.Entities.ComboService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id");

                    b.ToTable("combo_service");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly?>("WorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("working_date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_schedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("working_hour_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorScheduleScheduleId")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("schedule_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorScheduleScheduleId");

                    b.ToTable("doctor_working_hours");
                });

            modelBuilder.Entity("Backend.BO.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<double>("Price")
                        .HasColumnType("double(10, 2)")
                        .HasColumnName("service_price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("service_name");

                    b.HasKey("Id");

                    b.ToTable("service");
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("treatment_detail_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("treatment_detail");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("Backend.BO.Commons.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Backend.BO.Entities.DoctorWorkingHours", b =>
                {
                    b.HasOne("Backend.BO.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleScheduleId");

                    b.Navigation("DoctorSchedule");
                });

            modelBuilder.Entity("Backend.BO.Entities.TreatmentDetail", b =>
                {
                    b.HasOne("Backend.BO.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
